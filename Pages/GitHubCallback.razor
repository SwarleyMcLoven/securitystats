@page "/github-callback"
@using SecurityStats.Services
@using Microsoft.AspNetCore.WebUtilities
@inject GitHubAppService GitHubAppService
@inject UserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>GitHub App Installation</PageTitle>

<h1>GitHub App Installation</h1>

@if (isProcessing)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Processing installation...</span>
        </div>
        <p>Processing GitHub App installation...</p>
    </div>
}
else if (installationSuccess)
{
    <div class="alert alert-success">
        <h4>Installation Successful!</h4>
        <p>Your GitHub App has been successfully installed and configured.</p>
        <p><strong>Installation ID:</strong> @installationId</p>
        <p><strong>Organization:</strong> @organizationName</p>
        
        <div class="mt-3">
            <a href="/security" class="btn btn-primary">Go to Security Dashboard</a>
            <a href="/github-setup" class="btn btn-secondary">View Configuration</a>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">
        <h4>Installation Failed</h4>
        <p>@errorMessage</p>
        
        <div class="mt-3">
            <a href="/github-setup" class="btn btn-primary">Try Again</a>
        </div>
    </div>
}

@code {
    private bool isProcessing = true;
    private bool installationSuccess = false;
    private string errorMessage = string.Empty;
    private string installationId = string.Empty;
    private string organizationName = string.Empty;
    private string currentUserId = "demo-user"; // In real app, get from authentication

    protected override async Task OnInitializedAsync()
    {
        await ProcessCallback();
    }

    private async Task ProcessCallback()
    {
        try
        {
            var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
            var queryParams = QueryHelpers.ParseQuery(uri.Query);

            // Check for errors first
            if (queryParams.ContainsKey("error"))
            {
                var error = queryParams["error"].FirstOrDefault();
                var errorDescription = queryParams["error_description"].FirstOrDefault();
                errorMessage = $"GitHub returned an error: {error}. {errorDescription}";
                return;
            }

            // Get the installation ID from GitHub App installation callback
            if (!queryParams.ContainsKey("installation_id"))
            {
                errorMessage = "No installation ID received from GitHub.";
                return;
            }

            var installationIdStr = queryParams["installation_id"].FirstOrDefault();
            var setupAction = queryParams["setup_action"].FirstOrDefault();

            if (string.IsNullOrEmpty(installationIdStr) || !long.TryParse(installationIdStr, out var installationIdValue))
            {
                errorMessage = "Invalid installation ID received.";
                return;
            }

            // Get or create user
            var user = await UserService.GetOrCreateUserAsync(currentUserId);

            // Process the installation using the installation ID
            var installation = await GitHubAppService.ProcessInstallationByIdAsync(installationIdValue, user.Id);

            installationId = installation.InstallationId.ToString();
            organizationName = installation.OrganizationName;
            installationSuccess = true;

            // Show success message briefly, then redirect
            await Task.Delay(3000);
            Navigation.NavigateTo("/security");
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while processing the installation: {ex.Message}";
            Console.WriteLine($"Installation error: {ex}");
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }
}